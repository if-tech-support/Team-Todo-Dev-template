{"version":3,"sources":["components/Header.jsx","atoms/atom.js","components/Breadcrumb.jsx","hooks/useUpdateTodoState.jsx","components/StatusButton.jsx","constants.js","components/PriorityButton.jsx","routes/ListView.jsx","utils/currentDateFormatter.js","routes/Create.jsx","utils/getInputId.js","hooks/useUpdateTodo.jsx","hooks/useDeleteTodo.jsx","routes/Edit.jsx","components/ContentContainer.jsx","routes/Detail.jsx","routes/Router.jsx","App.js","reportWebVitals.js","index.js"],"names":["Header","className","persistAtom","recoilPersist","todoListState","atom","key","default","effects_UNSTABLE","id","title","detail","status","priority","createAt","updateAt","Breadcrumb","breadcrumbElements","map","useUpdateTodoState","useRecoilState","todoList","setTodoList","replaceItemAtIndex","index","newValue","slice","updateTodoStatus","findIndex","todo","updateTodoPriority","StatusButton","ButtonStyle","未着手","作業中","完了","onClick","PriorityButton","高","中","低","ListView","useRecoilValue","navigate","useNavigate","filter","length","to","htmlFor","type","placeholder","value","onChange","e","defaultValue","colSpan","state","targetTodo","currentDateFormatter","paddingZero","num","currentTime","Date","year","getFullYear","month","getMonth","date","getDate","hour","getHours","minute","getMinutes","second","getSeconds","Create","useState","inputTodo","setInputTodo","rows","target","name","today","reduce","a","b","Math","max","getInputId","useUpdateTodo","updateTodo","Number","newTodoList","useDeleteTodo","deleteTodo","splice","Edit","navigation","useLocation","setTodo","ContentContainer","description","Detail","Router","exact","path","element","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.47019d4f.chunk.js","sourcesContent":["import \"../style/Header.css\";\n\nconst Header = () => {\n  return (\n    <>\n      <header>\n        <h1 className=\"header-title\">Todoアプリ</h1>\n      </header>\n    </>\n  );\n};\n\nexport default Header;\n","import { atom } from \"recoil\";\nimport { recoilPersist } from \"recoil-persist\";\n\nconst { persistAtom } = recoilPersist();\n\nexport const inputState = atom({\n  key: \"inputState\",\n  default: \"test\",\n  effects_UNSTABLE: [persistAtom],\n});\n\nexport const todoListState = atom({\n  key: \"todoState\",\n  default: [\n    // TodoListダミーデータ\n    {\n      id: 1,\n      title: \"Github上に静的サイトをホスティングする\",\n      detail:\"Githubのアカウントを作成する。静的サイトを作成する。作ったサイトをGithubにアップする。\",\n      status: \"未着手\",\n      priority: \"低\",\n      createAt: \"2020-11-8 18:55:07\",\n      updateAt: \"2020-11-8 18:55:07\",\n    },\n    {\n      id: 2,\n      title: \"ReactでTodoサイトを作成する\",\n      detail:\"必要な画面の洗い出しと設計。役割分担をどうするか検討する\",\n      status: \"完了\",\n      priority: \"中\",\n      createAt: \"2020-11-8 18:55:07\",\n      updateAt: \"2020-11-8 18:55:07\",\n    },\n    {\n      id: 3,\n      title: \"Todoサイトで画面遷移をできるようにする\",\n      detail:\"react-router-domをインストールしてフィージビリティーをチェックする\",\n      status: \"作業中\",\n      priority: \"高\",\n      createAt: \"2020-11-8 18:55:07\",\n      updateAt: \"2020-11-8 18:55:07\",\n    },\n  ],\n  effects_UNSTABLE: [persistAtom],\n});\n","import \"../style/Breadcrumb.css\";\n\nconst Breadcrumb = ({ breadcrumbElements }) => {\n  return (\n    <nav className=\"breadcrumb\">\n      <ul className=\"breadcrumb-elements\">\n        {breadcrumbElements.map(({ id, title }) => (\n          <li key={id} className=\"breadcrumb-element\">\n            {title}\n          </li>\n        ))}\n      </ul>\n    </nav>\n  );\n};\n\nexport default Breadcrumb;\n","import { todoListState } from \"../atoms/atom\";\nimport { useRecoilState } from \"recoil\";\n\n// ステータス、優先度更新用カスタムフック\nconst useUpdateTodoState = () => {\n  // todoリストデータ\n  const [todoList, setTodoList] = useRecoilState(todoListState);\n\n  // ステータス更新\n  const updateTodoStatus = (id) => {\n    const index = todoList.findIndex((todo) => todo.id === id);\n    setTodoList(() => {\n      switch (todoList[index].status) {\n        case \"未着手\":\n          return replaceItemAtIndex(todoList, index, {\n            ...todoList[index],\n            status: \"作業中\",\n          });\n        case \"作業中\":\n          return replaceItemAtIndex(todoList, index, {\n            ...todoList[index],\n            status: \"完了\",\n          });\n        case \"完了\":\n          return replaceItemAtIndex(todoList, index, {\n            ...todoList[index],\n            status: \"未着手\",\n          });\n        default:\n          return todoList;\n      }\n    });\n  };\n\n  // 優先度更新\n  const updateTodoPriority = (id) => {\n    const index = todoList.findIndex((todo) => todo.id === id);\n    setTodoList(() => {\n      switch (todoList[index].priority) {\n        case \"低\":\n          return replaceItemAtIndex(todoList, index, {\n            ...todoList[index],\n            priority: \"中\",\n          });\n        case \"中\":\n          return replaceItemAtIndex(todoList, index, {\n            ...todoList[index],\n            priority: \"高\",\n          });\n        case \"高\":\n          return replaceItemAtIndex(todoList, index, {\n            ...todoList[index],\n            priority: \"低\",\n          });\n        default:\n          return todoList;\n      }\n    });\n  };\n\n  // 選択されたtodoを新しいtodoに入れ替える処理\n  const replaceItemAtIndex = (todoList, index, newValue) => {\n    return [\n      ...todoList.slice(0, index),\n      newValue,\n      ...todoList.slice(index + 1),\n    ];\n  };\n\n  return { updateTodoStatus, updateTodoPriority };\n};\n\nexport default useUpdateTodoState;\n","import { STATUS_DONE, STATUS_PENDING, STATUS_WORKING } from \"../constants\";\nimport useUpdateTodoState from \"../hooks/useUpdateTodoState\";\n\nconst StatusButton = ({ todo }) => {\n  // ステータス更新用カスタムフック\n  const { updateTodoStatus } = useUpdateTodoState();\n  const ButtonStyle = {\n    未着手: STATUS_PENDING,\n    作業中: STATUS_WORKING,\n    完了: STATUS_DONE,\n  };\n  return (\n    <>\n      <button\n        className={ButtonStyle[todo.status]}\n        onClick={() => {\n          updateTodoStatus(todo.id);\n        }}\n      >\n        {todo.status}\n      </button>\n    </>\n  );\n};\n\nexport default StatusButton;\n","export const PRIORITY_HIGH =\n  \"table-content-priority table-content-priority-high\";\nexport const PRIORITY_NORMAL =\n  \"table-content-priority table-content-priority-normal\";\nexport const PRIORITY_LOW = \"table-content-priority table-content-priority-low\";\nexport const STATUS_PENDING =\n  \"table-content-status table-content-status-pending\";\nexport const STATUS_WORKING =\n  \"table-content-status table-content-status-working\";\nexport const STATUS_DONE = \"table-content-status table-content-status-done\";\n","import { PRIORITY_HIGH, PRIORITY_LOW, PRIORITY_NORMAL } from \"../constants\";\nimport useUpdateTodoState from \"../hooks/useUpdateTodoState\";\n\nconst PriorityButton = ({ todo }) => {\n  // ステータス更新用カスタムフック\n  const { updateTodoPriority } = useUpdateTodoState();\n  const ButtonStyle = {\n    高: PRIORITY_HIGH,\n    中: PRIORITY_NORMAL,\n    低: PRIORITY_LOW,\n  };\n  return (\n    <>\n      <button\n        className={ButtonStyle[todo.priority]}\n        onClick={() => {\n          updateTodoPriority(todo.id);\n        }}\n      >\n        {todo.priority}\n      </button>\n    </>\n  );\n};\n\nexport default PriorityButton;\n","import { useRecoilValue } from \"recoil\";\nimport { todoListState } from \"../atoms/atom\";\nimport { Link } from \"react-router-dom\";\nimport \"../style/ListView.css\";\nimport Breadcrumb from \"../components/Breadcrumb\";\nimport StatusButton from \"../components/StatusButton\";\nimport PriorityButton from \"../components/PriorityButton\";\nimport { useNavigate } from \"react-router\";\n\n// ぱんくずデータ 画面ごとに変更する\nconst breadcrumbElements = [{ id: 1, title: \"ホーム\" }];\n\nexport const ListView = () => {\n  // todoリストデータ\n  const todoList = useRecoilValue(todoListState);\n\n  // 画面遷移用のフック\n  const navigate = useNavigate();\n\n  return (\n    <>\n      <Breadcrumb breadcrumbElements={breadcrumbElements} />\n      <main>\n        <div className=\"task-info-area\">\n          <p className=\"task-info\">\n            進行中のタスクは\n            {todoList.filter((todo) => todo.status !== \"完了\").length !== 0 ? (\n              <>\n                <span>\n                  {todoList.filter((todo) => todo.status !== \"完了\").length}個\n                </span>\n                あります\n              </>\n            ) : (\n              \"ありません\"\n            )}\n          </p>\n          <Link to=\"create\">\n            <button className=\"btn-add\">\n              <span>+</span>タスクを追加\n            </button>\n          </Link>\n        </div>\n        <div className=\"search-area\">\n          <div className=\"search-keyword-area\">\n            <label className=\"label-search-area\" htmlFor=\"search-keyword-box\">\n              キーワード\n            </label>\n            <input\n              id=\"search-keyword-box\"\n              className=\"search-box\"\n              type=\"text\"\n              placeholder=\"キーワードを入力\"\n              value=\"\"\n              onChange={(e) => {}}\n            />\n          </div>\n          <div className=\"search-priority-area\">\n            <label className=\"label-search-area\">ステータス</label>\n            <select className=\"search-box\">\n              <option defaultValue=\"all\">すべて</option>\n              <option value=\"complete\">完了</option>\n              <option value=\"working\">作業中</option>\n              <option value=\"pending\">未着手</option>\n            </select>\n          </div>\n          <div className=\"search-status-area\">\n            <label className=\"label-search-area\">優先度</label>\n            <select className=\"search-box\">\n              <option defaultValue=\"all\">すべて</option>\n              <option value=\"high\">高</option>\n              <option value=\"normal\">中</option>\n              <option value=\"low\">低</option>\n            </select>\n          </div>\n        </div>\n        <div className=\"bulk-exection-area\">\n          <label className=\"label-bulk-exection\">まとめて操作：</label>\n          <select className=\"bulk-exection-selection\">\n            <option defaultValue=\"\">------------</option>\n            <option value=\"complete\">完了</option>\n            <option value=\"delete\">削除</option>\n          </select>\n          <button className=\"btn-bulk-exection\">実行</button>\n        </div>\n        <table className=\"todo-table\">\n          <thead className=\"todo-table-header\">\n            <tr>\n              <th colSpan=\"3\" className=\"todo-table-header-title\">\n                タスク名\n              </th>\n              <th>ステータス</th>\n              <th>優先度</th>\n              <th>作成日時</th>\n              <th>更新日時</th>\n            </tr>\n          </thead>\n          <tbody>\n            {/* ダミーデータを表示 */}\n            {todoList.map((todo) => {\n              return (\n                <tr key={todo.id} className=\"todo-table-body-row\">\n                  <td>\n                    <input type=\"checkbox\" />\n                  </td>\n                  <td className=\"table-content-title\">\n                    <Link to=\"/detail\" state={{ todo: todo }}>\n                      {todo.title}\n                    </Link>\n                  </td>\n                  <td>\n                    <button\n                      className=\"btn-edit\"\n                      onClick={() => {\n                        navigate(`edit/${todo.id}`, {\n                          state: { targetTodo: todo },\n                        });\n                      }}\n                    >\n                      ✎\n                    </button>\n                  </td>\n                  <td>\n                    <StatusButton todo={todo} />\n                  </td>\n                  <td>\n                    <PriorityButton todo={todo} />\n                  </td>\n                  <td>{todo.createAt}</td>\n                  <td>{todo.updateAt}</td>\n                </tr>\n              );\n            })}\n          </tbody>\n        </table>\n      </main>\n    </>\n  );\n};\n","export const currentDateFormatter = () => {\n  // 2桁0埋め処理\n  const paddingZero = (num) => {\n    return (\"00\" + num).slice(-2);\n  };\n\n  const currentTime = new Date();\n  const year = currentTime.getFullYear();\n  const month = paddingZero(currentTime.getMonth() + 1);\n  const date = paddingZero(currentTime.getDate());\n  const hour = paddingZero(currentTime.getHours());\n  const minute = paddingZero(currentTime.getMinutes());\n  const second = paddingZero(currentTime.getSeconds());\n\n  return `${year}-${month}-${date} ${hour}:${minute}:${second}`;\n};\n","import Breadcrumb from \"../components/Breadcrumb\";\nimport \"../style/Create.css\";\nimport { Link } from \"react-router-dom\";\nimport {useState} from \"react\";\nimport { useRecoilState } from \"recoil\";\nimport { todoListState } from \"../atoms/atom\";\nimport { currentDateFormatter } from \"../utils/currentDateFormatter\";\nimport { getInputId } from '../utils/getInputId'\n\n// ぱんくず\nconst breadcrumbElements = [\n  { id: 1, title: \"ホーム\" },\n  { id: 2, title: \"追加\" },\n];\n\nexport const Create = () => {\n  // recoilでtodoデータを状態管理\n  const [todoList, setTodoList] = useRecoilState(todoListState)\n\n  // 追加するtodoデータ\n  const [inputTodo, setInputTodo] = useState({\n     title:'',\n     detail:'',\n     status: \"未着手\",\n     priority:'',\n  })\n\n  // 追加ボタン押下時に呼び出し\n  const addTodo = () => {\n    // 作成・更新日時作成\n    const today = currentDateFormatter()\n    // id作成\n    const id = getInputId(todoList)\n\n    // 既存のtodoデータに新たにtodoデータ(入力データ)を追加する\n    setTodoList([...todoList, {...inputTodo, id:id, createAt:today, updateAt:today} ])\n  }\n\n  return (\n  <>\n    <Breadcrumb breadcrumbElements={breadcrumbElements} />\n    \n    <div className='create-container'>\n\n      <div className='contents-container'>\n        <div className='todo-create'>\n          <div className='task-container input-container content-container'>\n            <label htmlFor='title' className='task-label input-area-label label'>\n              タスク名 :\n            </label>\n            <input\n              id='title'\n              className='title-input input'\n              type='text'\n              rows='1'\n              onChange={ (e) => setInputTodo({...inputTodo,title: e.target.value}) }\n            />\n          </div>\n\n          <div className='text-container input-container content-container'>\n            <label htmlFor='text' className='text-label input-area-label label'>\n              内容 :\n            </label>\n            <textarea\n              id='text'\n              className='text-input input'\n              type='text'\n              rows='20'\n              onChange={ (e) => setInputTodo({...inputTodo,detail:e.target.value}) }\n            ></textarea>\n          </div>\n\n          <div className='priority-container select-container input-container content-container'>\n            <label className='priority-label input-area-label label'>\n              優先度 :\n            </label>\n            <select \n              name='priority'\n              className='select-priority select-box' \n              onChange={ (e) => {setInputTodo({...inputTodo, priority:e.target.value})\n            }}\n            >\n              <option className='select-default option'>\n                --------------------\n              </option>\n              <option className='high option' value='高'>高</option>\n              <option className='middle option'value='中'>中</option>\n              <option className='low option'value='低'>低</option>\n            </select>\n          </div>\n\n          <div className='btn-container content-container'>\n            <Link to='/'>\n              <button className='back-button button'>戻る</button>\n            </Link>\n            <Link to='/'>\n              <button className='add-button button' onClick={addTodo}>追加</button>\n            </Link>\n          </div>\n        </div>\n      </div>\n    </div>\n  </>\n  );\n}\n\n","// 既存のtodoの最大id+1の値を取得\n// todoList:既存のtodo配列データ\nexport const getInputId = (todoList) => {\n  const idArray = todoList.map((todo) => {\n    return todo.id\n  })\n\n  // todoデータが空の場合のため初期値：0を設定\n  const inputtedMaxId = idArray.reduce( (a, b) => {\n    return Math.max(a, b)\n  }, 0)\n\n  return inputtedMaxId+1\n}","import { todoListState } from \"../atoms/atom\";\nimport { useRecoilState } from \"recoil\";\nimport { currentDateFormatter } from \"../utils/currentDateFormatter\";\n\nconst useUpdateTodo = () => {\n  // todoリストデータ\n  const [todoList, setTodoList] = useRecoilState(todoListState);\n\n  // リストアイテムの更新\n  const updateTodo = (id, todo) => {\n    // todoデータのインデックス\n    const index = todoList.findIndex((todo) => todo.id === Number(id));\n\n    const newTodoList = [...todoList];\n    newTodoList[index] = { ...todo, updateAt: currentDateFormatter() };\n    setTodoList(newTodoList);\n  };\n\n  return { updateTodo };\n};\n\nexport default useUpdateTodo;\n","import { todoListState } from \"../atoms/atom\";\nimport { useRecoilState } from \"recoil\";\n\nconst useDeleteTodo = () => {\n  // todoリストデータ\n  const [todoList, setTodoList] = useRecoilState(todoListState);\n\n  // リストアイテムの削除\n  const deleteTodo = (id) => {\n    // todoデータのインデックス\n    const index = todoList.findIndex((todo) => todo.id === Number(id));\n\n    const newTodoList = [...todoList];\n    newTodoList.splice(index, 1);\n    setTodoList(newTodoList);\n  };\n\n  return { deleteTodo };\n};\n\nexport default useDeleteTodo;\n","import { useNavigate } from \"react-router\";\nimport { useState } from \"react\";\nimport { useLocation } from \"react-router\";\n\nimport Breadcrumb from \"../components/Breadcrumb\";\nimport \"../style/Edit.css\";\nimport useUpdateTodo from \"../hooks/useUpdateTodo\";\nimport useDeleteTodo from \"../hooks/useDeleteTodo\";\n\n// ぱんくずデータ 画面ごとに変更する\nconst breadcrumbElements = [\n  { id: 1, title: \"ホーム\" },\n  { id: 2, title: \"編集\" },\n];\n\nexport const Edit = () => {\n  // 画面遷移用のフック\n  const navigation = useNavigate();\n\n  // 選択されたtodoを受け取る\n  const { targetTodo } = useLocation().state;\n\n  // todoデータ\n  const [todo, setTodo] = useState(targetTodo);\n\n  // Todo更新用カスタムフック\n  const { updateTodo } = useUpdateTodo();\n\n  // Todo削除用カスタムフック\n  const { deleteTodo } = useDeleteTodo();\n\n  return (\n    <>\n      <Breadcrumb breadcrumbElements={breadcrumbElements} />\n      <div className=\"edit__input-form\">\n        <dl>\n          <div className=\"edit__input-list\">\n            <dt>\n              <label htmlFor=\"task-title\" className=\"edit__label\">\n                タスク名：\n              </label>\n            </dt>\n            <dd>\n              <input\n                id=\"task-title\"\n                className=\"edit__input edit__input-title\"\n                type=\"text\"\n                value={todo.title}\n                onChange={(e) => setTodo({ ...todo, title: e.target.value })}\n              />\n            </dd>\n          </div>\n          <div className=\"edit__input-list\">\n            <dt>\n              <label\n                htmlFor=\"task-detail\"\n                className=\"edit__label edit__label-detail\"\n              >\n                内容：\n              </label>\n            </dt>\n            <dd>\n              <textarea\n                id=\"task-detail\"\n                className=\"edit__input edit__input-detail\"\n                rows=\"10\"\n                value={todo.detail}\n                onChange={(e) => setTodo({ ...todo, detail: e.target.value })}\n              ></textarea>\n            </dd>\n          </div>\n          <div className=\"edit__input-list\">\n            <dt>\n              <label className=\"edit__label\">ステータス：</label>\n            </dt>\n            <dd>\n              <select\n                className=\"edit__input edit__select-status\"\n                value={todo.status}\n                onChange={(e) => setTodo({ ...todo, status: e.target.value })}\n              >\n                <option value=\"完了\">完了</option>\n                <option value=\"作業中\">作業中</option>\n                <option value=\"未着手\">未着手</option>\n              </select>\n            </dd>\n          </div>\n          <div className=\"edit__input-list\">\n            <dt>\n              <label className=\"edit__label\">優先度：</label>\n            </dt>\n            <dd>\n              <select\n                className=\"edit__input edit__select-priority\"\n                value={todo.priority}\n                onChange={(e) => setTodo({ ...todo, priority: e.target.value })}\n              >\n                <option value=\"高\">高</option>\n                <option value=\"中\">中</option>\n                <option value=\"低\">低</option>\n              </select>\n            </dd>\n          </div>\n        </dl>\n        <div className=\"edit__btn-area\">\n          <button\n            className=\"edit__btn edit__btn-delete\"\n            onClick={() => {\n              deleteTodo(todo.id);\n\n              navigation(\"/\");\n            }}\n          >\n            削除\n          </button>\n          <button\n            className=\"edit__btn edit__btn-return\"\n            onClick={() => {\n              navigation(\"/\");\n            }}\n          >\n            戻る\n          </button>\n          <button\n            className=\"edit__btn edit__btn-save\"\n            onClick={() => {\n              updateTodo(todo.id, todo);\n\n              navigation(\"/\");\n            }}\n          >\n            保存\n          </button>\n        </div>\n      </div>\n    </>\n  );\n};\n","export const ContentContainer = ({todo}) => {\n    const { title,detail,status,priority } = todo;\n    const detailArray = [\n        {name:\"タスク名\",description:title},\n        {name:\"内容\",description:detail},\n        {name:\"ステータス\",description:status},\n        {name:\"優先度\",description:priority}]\n    return (\n        detailArray.map(({name,description})=>{\n            return(\n                <div className=\"content-container\">\n                    <p className=\"field-name\">{name}</p>\n                    <p className=\"field-description\">{description}</p>\n                </div>\n            )\n        })\n    )\n}","import Breadcrumb from \"../components/Breadcrumb\";\nimport \"../style/Detail.css\";\nimport { useLocation } from \"react-router\";\nimport { Link } from \"react-router-dom\";\nimport { ContentContainer } from \"../components/ContentContainer\";\n\n// ぱんくずデータ 画面ごとに変更する\nconst breadcrumbElements = [\n  { id: 1, title: \"ホーム\" },\n  { id: 2, title: \"詳細\" },\n];\n\n// ダミーコンポーネント\nexport const Detail = () => {\n  const location = useLocation();\n  const { todo } = location.state;\n\n  return (\n    <>\n      <Breadcrumb breadcrumbElements={breadcrumbElements} />\n      <div className=\"detail-container\">\n        <ContentContainer todo={todo} />\n\n        <div className=\"btn-container content-container\">\n          <Link to=\"/\">\n            <button className=\"back-button button\">戻る</button>\n          </Link>\n        </div>\n      </div>\n    </>\n  );\n};\n","import { Routes, Route } from \"react-router\";\nimport { ListView } from \"./ListView\";\nimport { Create } from \"./Create\";\nimport { Edit } from \"./Edit\";\nimport { Detail } from \"./Detail\";\n\nconst Router = () => {\n  return (\n    <Routes>\n      <Route exact path=\"/\" element={<ListView />} />\n      <Route path=\"create\" element={<Create />} />\n      <Route path=\"edit/:todoId\" element={<Edit />} />\n      <Route path=\"detail\" element={<Detail />} />\n    </Routes>\n  );\n};\n\nexport default Router;\n","import \"./App.css\";\n\nimport Header from \"./components/Header\";\nimport Router from \"./routes/Router\";\n\nconst App = () => {\n  return (\n    <>\n      <Header />\n      <Router />\n    </>\n  );\n};\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { BrowserRouter } from \"react-router-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport { RecoilRoot } from 'recoil';\n\nReactDOM.render(\n  <React.StrictMode>\n    <RecoilRoot>\n      <BrowserRouter>\n        <App />\n      </BrowserRouter>\n    </RecoilRoot>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}